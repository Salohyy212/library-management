openapi: 3.0.3
info:
  title: Library API
  version: 1.0.1
  description: STD22062
servers:
  - url: https://library.com
tags:
  - Books
  - Authors
paths:
  /books:
    get:
      tags:
        - Books
      summary: Get all books
      description: The returned books are ordered by updated datetime.
      operationId: getBooks
      parameters:
        - in: query
          name: bookName
          description: Filter return books by given name
          required: false
          schema:
            type: string
        - in: query
          name: releaseDateMin
          description: |
            If `releaseDateMax` is not provided, `releaseDateMin` is ignored.
            `releaseDateMin` cannot be after `releaseDateMax`.
          schema:
            type: string
            format: date
          required: false
        - in: query
          name: releaseDateMax
          description: |
            If `releaseDateMin` is not provided, `releaseDateMax` is ignored.
            `releaseDateMax` cannot be before `releaseDateMin`.
          schema:
            type: string
            format: date
          required: false
        - in: query
          name: page
          description:
            The page number to display (default: 1)
          schema:
            type: integer
            default: 1
          required: false
        - in: query
          name: pageSize
          description:
            Page size (default: 50)
          schema:
            type: integer
            default: 50
          required: false
      responses:
        200:
          description: The list of filtered books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'


    put:
      tags:
        - Books
      summary: Create or update a list of books
      operationId: crupdateBooks
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CrupdateBook'
      responses:
        200:
          description: The list of created or updated books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
  /books/{bookId}/authors/{authorId}:
    put:
      summary: Associate a single book to one author
      tags:
        - Books
      parameters:
        - name: bookId
          in: path
          schema:
            type: string
          required: true
        - name: authorId
          in: path
          schema:
            type: string
          required: true
      responses:
        200:
          description: The list of authors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
  /books/authors:
    put:
      summary: Associate some books to some authors
      tags:
        - Books
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: object
                $ref: '#/components/schemas/UpdateBookAuthor'
            responses:
              200:
                description: Updated books with authors
  /authors:
    get:
      summary: Get all authors
      operationId: getAuthors
      tags:
        - Authors
      parameters:
        - name: authorName
          in: query
          description: |
            Filter returned authors by given name. 
            If not provided, then list is not filtered.
          schema:
            type: string
          required: false
      responses:
        200:
          description: The list of filtered authors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Author'
    put:
      summary: Create or update authors
      operationId: crupdateAuthors
      tags:
        - Authors
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Author'
      responses:
        200:
          description: The list of created or updated authors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Author'
  /authors/{aId}:
    delete:
      summary: Delete an author
      operationId: deleteAuthor
      tags:
        - Authors
      parameters:
        - name: aId
          in: path
          description: Author identifier to be deleted
          schema:
            type: string
          required: true
      responses:
        200:
          description: The author deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'
  /authors/{page}/{pageSize}:
    get:
      summary: Get a specific page of authors
      operationId: getAuthorsByPage
      tags:
        - Authors
      parameters:
        - name: authorName
          in: query
          description: Filter returned authors by given name. If not provided, then the list is not filtered.
          schema:
            type: string
          required: false
        - name: page
          in: path
          description:
            The page number to display (default: 1)
          schema:
            type: integer
            default: 1
          required: true
        - name: pageSize
          in: path
          description:
            Page size (default: 50)
          schema:
            type: integer
            default: 50
          required: true
      responses:
        200:
          description: The list of filtered authors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Author'

components:
  schemas:
    CrupdateBook:
      type: object
      properties:
        id:
          type: string
        bookName:
          type: string
        pageNumbers:
          type: integer
        topic:
          type: string
          enum:
            - ROMANCE
            - COMEDY
            - OTHER
        releaseDate:
          type: string
          format: date
    Book:
      type: object
      properties:
        id:
          type: string
        bookName:
          type: string
        author:
          $ref: '#/components/schemas/Author'
        pageNumbers:
          type: integer
        topic:
          type: string
          enum:
            - ROMANCE
            - COMEDY
            - OTHER
        releaseDate:
          type: string
          format: date
    Author:
      type: object
      properties:
        id:
          type: string
        authorName:
          type: string
        sex:
          $ref: '#/components/schemas/Sex'
    Sex:
      type: string
      enum:
        - M
        - F
    UpdateBookAuthor:
      type: object
      properties:
        bookId:
          type: string
        authorId:
          type: string
#2-b
# i- "UpdateBookAuthor" est conçu pour servir un but précis : associer un livre à un auteur. C'est pourquoi il inclut uniquement les identifiants du livre et de l'auteur.
# ii- Si, dans un cas d'utilisation spécifique, vous devez mettre à jour des propriétés du livre ou de l'auteur lors de leur association, vous devriez inclure ces propriétés dans "UpdateBookAuthor"

#4
#a- Oui, il est possible d'utiliser des entêtes de requête pour gérer la pagination. Cependant, cela n'est pas couramment pratiqué car les paramètres de requête et de chemin sont plus appropriés pour spécifier des filtres et des options de pagination. 
#b- Non, il n'est généralement pas recommandé de gérer la pagination à travers les entêtes de la requête. Utiliser des paramètres de requête ou de chemin est plus conforme aux conventions RESTful et facilite la compréhension des requêtes. 
  
    
    
    
      
       
