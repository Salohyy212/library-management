openapi: 3.0.3
info:
  title: Library API
  version: 1.0.1
  description: STD22062
servers:
  - url: https://library.com
tags:
  - Books
  - Authors
paths:
  /books:
    get:
      tags:
        - Books
      summary: Get all books
      description: The returned books are ordered by updated datetime.
      operationId: getBooks
      parameters:
        - in: query
          name: bookName
          description: Filter return books by given name
          required: false
          schema:
            type: string
        - in: query
          name: releaseDateMin
          description: |
            If `releaseDateMax` is not provided, `releaseDateMin` is ignored.
            `releaseDateMin` cannot be after `releaseDateMax`.
          schema:
            type: string
            format: date
          required: false
        - in: query
          name: releaseDateMax
          description: |
            If `releaseDateMin` is not provided, `releaseDateMax` is ignored.
            `releaseDateMax` cannot be before `releaseDateMin`.
          schema:
            type: string
            format: date
          required: false
       - $ref : '#/components/parameters/queryPage'
       - $ref : '#/components/parameters/queryPagesize'
      responses:
        200:
          description: The list of filtered books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
    put:
      tags:
        - Books
      summary: Create or update a list of books
      operationId: crupdateBooks
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CrupdateBook'
      responses:
        200:
          description: The list of created or updated books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
  /books/{bookId}/authors/{authorId}:
    put:
      summary: Associate a single book to one author
      tags:
        - Books
      parameters:
        - name: bookId
          in: path
          schema:
            type: string
          required: true
        - name: authorId
          in: path
          schema:
            type: string
          required: true
      responses:
        200:
          description: The list of authors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
  /books/authors:
    put:
      summary: Associate some books to some authors
      tags:
        - Books
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: object
                $ref: '#/components/schemas/UpdateBookAuthor'
            responses:
              200:
                description: Updated books with authors
              400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
  /authors:
    get:
      summary: Get all authors
      operationId: getAuthors
      tags:
        - Authors
      parameters:
        - name: authorName
          in: query
          description: |
            Filter returned authors by given name. 
            If not provided, then list is not filtered.
          schema:
            type: string
          required: false
      responses:
        200:
          description: The list of filtered authors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Author'
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
    put:
      summary: Create or update authors
      operationId: crupdateAuthors
      tags:
        - Authors
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Author'
      responses:
        200:
          description: The list of created or updated authors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Author'
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
  /authors/{aId}:
    delete:
      summary: Delete an author
      operationId: deleteAuthor
      tags:
        - Authors
      parameters:
        - name: aId
          in: path
          description: Author identifier to be deleted
          schema:
            type: string
          required: true
      responses:
        200:
          description: The author deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
  /authors/{page}/{pageSize}:
    get:
      summary: Get a specific page of authors
      operationId: getAuthorsByPage
      tags:
        - Authors
      parameters:
        - name: authorName
          in: query
          description: Filter returned authors by given name. If not provided, then the list is not filtered.
          schema:
            type: string
          required: false
        - $ref : '#/components/parameters/pathPage'
        - $ref : '#/components/parameters/pathPagesize'
      responses:
        200:
          description: The list of filtered authors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Author'
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'

components:
  schemas:
    CrupdateBook:
      type: object
      properties:
        id:
          type: string
        bookName:
          type: string
        pageNumbers:
          type: integer
        topic:
          type: string
          enum:
            - ROMANCE
            - COMEDY
            - OTHER
        releaseDate:
          type: string
          format: date
    Book:
      type: object
      properties:
        id:
          type: string
        bookName:
          type: string
        author:
          $ref: '#/components/schemas/Author'
        pageNumbers:
          type: integer
        topic:
          type: string
          enum:
            - ROMANCE
            - COMEDY
            - OTHER
        releaseDate:
          type: string
          format: date
    Author:
      type: object
      properties:
        id:
          type: string
        authorName:
          type: string
        sex:
          $ref: '#/components/schemas/Sex'
    Sex:
      type: string
      enum:
        - M
        - F
    UpdateBookAuthor:
      type: object
      properties:
        bookId:
          type: string
        authorId:
          type: string
    ApiResponse:
      type: object
      properties:
        statut:
          type: object
          properties:
            code:
              type: integer
            message:
              type: string
        body:
          type: object
    SuccessResponse:
      allOf:
        - $ref: '#/components/schemas/ApiResponse'
        - type: object
          properties:
            data:
              type: object
    BadRequest:
      allOf:
        - $ref: '#/components/schemas/ApiResponse'
        - type: object
          properties:
            data:
              type: object
    Forbidden:
      allOf:
        - $ref: '#/components/schemas/ApiResponse'
        - type: object
          properties:
            data:
              type: object
    InternalServerError:
      allOf:
        - $ref: '#/components/schemas/ApiResponse'
        - type: object
          properties:
            data:
              type: object
  parameters:
    queryPage:
      in: query
      name: page
      required: false
      schema:
        type: integer
        default: 1
    queryPagesize:
      name: pagesize
      in: query
      schema:
        type: integer
        default: 50
      required: false
    pathPage:
      in: path
      name: pathPage
      required: true
      schema:
        type: integer
        default: 1
    pathPagesize:
      in: path
      name: pathPagesize
      schema:
        type: integer
        default: 50
      required: true
  responses:
      200:
        description: Requet successfully
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SuccessResponse'
      400:
        description: Bad request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BadRequest'
      403:
        description: Forbidden
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Forbidden'
      500:
        description: Internal server error
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InternalServerError'
