openapi: 3.0.3
info:
  title: Library API
  version: 1.2.0
  description: STD22062
servers:
  - url: https://library.com
tags:
  - Books
  - Authors
paths:
  /books:
    get:
      tags:
        - Books
      summary: Get all books
      description: The returned books are ordered by updated datetime.
      operationId: getBooks
      parameters:
        - in: query
          name: bookName
          description: Filter return books by given name
          required: false
          schema:
            type: string
        - in: query
          name: releaseDateMin
          description: |
            If `releaseDateMax` is not provided, `releaseDateMin` is ignored.
            `releaseDateMin` cannot be after `releaseDateMax`.
          schema:
            type: string
            format: date
          required: false
        - in: query
          name: releaseDateMax
          description: |
            If `releaseDateMin` is not provided, `releaseDateMax` is ignored.
            `releaseDateMax` cannot be before `releaseDateMin`.
          schema:
            type: string
            format: date
          required: false
        - $ref : '#/components/parameters/queryPage'
        - $ref : '#/components/parameters/queryPagesize'
      responses:
        200:
          $ref: '#/components/responses/BookList_200'
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
    put:
      tags:
        - Books
      summary: Create or update a list of books
      operationId: crupdateBooks
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/ImportBook'
      responses:
        200:
          $ref: '#/components/responses/BookList_200'
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
  /books/{bookId}/authors/{authorId}:
    put:
      summary: Associate a single book to one author
      tags:
        - Books
      parameters:
        - name: bookId
          in: path
          schema:
            type: string
          required: true
        - name: authorId
          in: path
          schema:
            type: string
          required: true
      responses:
        200:
          description: The list of authors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
  /books/authors:
    put:
      summary: Associate some books to some authors
      tags:
        - Books
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: object
                $ref: '#/components/schemas/UpdateBookAuthor'
      responses:
        200:
          description: Updated books with authors
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
  /books/import:
    post:
      summary: Import books
      tags:
        - Books
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImportBook'
          application/vnd.openxmlformats-officedocument.spreadsheetml.sheet:
            schema:
              $ref: '#/components/schemas/ImportBookExcel'
      responses:
        200:
          $ref: '#/components/responses/BookList_200'
          400:
            $ref: '#/components/responses/400'
          403:
            $ref: '#/components/responses/403'
          500:
            $ref: '#/components/responses/500'
  /books/borrowed:
    get:
      tags:
        - Books
      summary: Get borrowed books
      description: Retrieve the list of books currently borrowed.
      operationId: getBorrowedBooks
      responses:
        200:
          $ref: '#/components/responses/BookList_200'
          400:
            $ref: '#/components/responses/400'
          403:
            $ref: '#/components/responses/403'
          500:
            $ref: '#/components/responses/500'
  /books/available:
    get:
      tags:
        - Books
      summary: Get available books
      description: Retrieve the list of books currently available for borrowing.
      operationId: getAvailableBooks
      responses:
        200:
          $ref: '#/components/responses/BookList_200'
          400:
            $ref: '#/components/responses/400'
          403:
            $ref: '#/components/responses/403'
          500:
            $ref: '#/components/responses/500'

  /authors:
    get:
      summary: Get all authors
      operationId: getAuthors
      tags:
        - Authors
      parameters:
        - name: authorName
          in: query
          description: |
            Filter returned authors by given name. 
            If not provided, then list is not filtered.
          schema:
            type: string
          required: false
      responses:
        200:
          $ref: '#/components/responses/AuthorList_200'
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
    put:
      summary: Create or update authors
      operationId: crupdateAuthors
      tags:
        - Authors
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/ImportAuthor'
      responses:
          200:
            $ref: '#/components/responses/AuthorList_200'
          400:
            $ref: '#/components/responses/400'
          403:
            $ref: '#/components/responses/403'
          500:
            $ref: '#/components/responses/500'
  /authors/{aId}:
    delete:
      summary: Delete an author
      operationId: deleteAuthor
      tags:
        - Authors
      parameters:
        - name: aId
          in: path
          description: Author identifier to be deleted
          schema:
            type: string
          required: true
      responses:
        200:
          $ref: '#/components/responses/AuthorList_200'
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
  /authors/import:
    post:
      summary: Import authors
      tags:
        - Authors
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImportAuthor'
          application/vnd.openxmlformats-officedocument.spreadsheetml.sheet:
            schema:
              $ref: '#/components/schemas/ImportAuthorExcel'
      responses:
          200:
            $ref: '#/components/responses/AuthorList_200'
          400:
            $ref: '#/components/responses/400'
          403:
            $ref: '#/components/responses/403'
          500:
            $ref: '#/components/responses/500'
  /authors/{page}/{pageSize}:
    get:
      summary: Get a specific page of authors
      operationId: getAuthorsByPage
      tags:
        - Authors
      parameters:
        - name: authorName
          in: query
          description: Filter returned authors by given name. If not provided, then the list is not filtered.
          schema:
            type: string
          required: false
        - $ref: '#/components/parameters/pathPage'
        - $ref: '#/components/parameters/pathPagesize'
      responses:
        200:
          $ref: '#/components/responses/AuthorList_200'
  /visitors:
    get:
      tags:
        - Visitors
      summary: Get all visitors
      description: Retrieve all registered visitors
      operationId: getVisitors
      responses:
        200:
          description: A list of all registered visitors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Visitor'
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
  /visitors/{visitorId}/borrow/{bookId}:
    post:
      tags:
        - Visitors
      summary: Borrow a book
      description: Allows a visitor to borrow a book from the library.
      operationId: borrowBook
      parameters:
        - name: visitorId
          in: path
          required: true
          schema:
            type: string
            description: Visitor's identifier
        - name: bookId
          in: path
          required: true
          schema:
            type: string
            description: Book's identifier to borrow
      responses:
        200:
          description: Book borrowed successfully
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
  /visitors/{visitorId}/return/{bookId}:
    post:
      tags:
        - Visitors
      summary: Return a book
      description: Allows a visitor to return a book to the library.
      operationId: returnBook
      parameters:
        - name: visitorId
          in: path
          required: true
          schema:
            type: string
            description: Visitor's identifier
        - name: bookId
          in: path
          required: true
          schema:
            type: string
            description: Book's identifier to return
      responses:
        200:
          description: Book returned successfully
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'

components:
  schemas:
    Visitor:
      type: object
      properties:
        ID:
          type: string
        name:
          type: string
        reference:
          type: string
    CrupdateBook:
      type: object
      properties:
        id:
          type: string
        bookName:
          type: string
        pageNumbers:
          type: integer
        topic:
          type: string
          enum:
            - ROMANCE
            - COMEDY
            - OTHER
        releaseDate:
          type: string
          format: date
    Book:
      type: object
      properties:
        id:
          type: string
        bookName:
          type: string
        author:
          $ref: '#/components/schemas/Author'
        pageNumbers:
          type: integer
        topic:
          type: string
          enum:
            - ROMANCE
            - COMEDY
            - OTHER
        releaseDate:
          type: string
          format: date
    Author:
      type: object
      properties:
        id:
          type: string
        authorName:
          type: string
        sex:
          $ref: '#/components/schemas/Sex'
    Sex:
      type: string
      enum:
        - M
        - F
    UpdateBookAuthor:
      type: object
      properties:
        bookId:
          type: string
        authorId:
          type: string

    ResponseStatus:
      type: object
      properties:
        code:
          type: integer
          example: 200
        message:
          type: string
    ResponseBodyTemplate:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/ResponseStatus'
    BookListBody:
      allOf:
        - $ref: '#/components/schemas/ResponseBodyTemplate'
        - properties:
            body:
              type: array
              items:
                $ref: '#/components/schemas/Book'
    AuthorListBody:
      allOf:
        - $ref: '#/components/schemas/ResponseBodyTemplate'
        - properties:
            body:
              type: array
              items:
                $ref: '#/components/schemas/Author'
    BadRequestBody:
      allOf:
        - $ref: '#/components/schemas/ResponseBodyTemplate'
      example:
        status:
          code: 400
          message: BAD REQUEST
        body: {}
    ForbiddenBody:
      allOf:
        - $ref: '#/components/schemas/ResponseBodyTemplate'
      example:
        status:
          code: 403
          message: FORBIDDEN
        body: {}
    InternalServerErrorBody:
      allOf:
        - $ref: '#/components/schemas/ResponseBodyTemplate'
      example:
        status:
          code: 500
          message: INTERNAL SERVER ERROR
        body: {}
    ImportBook:
      oneOf:
        - $ref: '#/components/schemas/ImportBookJson'
        - $ref: '#/components/schemas/ImportBookExcel'
    ImportBookJson:
      type: object
      properties:
        bookName:
          type: string
        author:
          $ref: '#/components/schemas/Author'
        pageNumbers:
          type: integer
        topic:
          type: string
          enum:
            - ROMANCE
            - COMEDY
            - OTHER
        releaseDate:
          type: string
          format: date
    ImportBookExcel:
      type: object
      properties:
        bookName:
          type: string
        author:
          type: string
        pageNumbers:
          type: integer
        topic:
          type: string
        releaseDate:
          type: string
          format: date
        idAuthor:
          type: string
    ImportAuthor:
      oneOf:
        - $ref: '#/components/schemas/ImportAuthorJson'
        - $ref: '#/components/schemas/ImportAuthorExcel'
    ImportAuthorJson:
      type: object
      properties:
        authorName:
          type: string
        sex:
          $ref: '#/components/schemas/Sex'
    ImportAuthorExcel:
      type: object
      properties:
        authorName:
          type: string
        sex:
          type: string
        idAuthor:
          type: string
  parameters:
    queryPage:
      in: query
      name: page
      required: false
      schema:
        type: integer
        default: 1
    queryPagesize:
      name: pagesize
      in: query
      schema:
        type: integer
        default: 50
      required: false
    pathPage:
      in: path
      name: pathPage
      required: true
      schema:
        type: integer
        default: 1
    pathPagesize:
      in: path
      name: pathPagesize
      schema:
        type: integer
        default: 50
      required: true
  responses:
    BookList_200:
      description: List of books
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/BookListBody'
    AuthorList_200:
      description: List of books
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/AuthorListBody'
    400:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BadRequestBody'
    403:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ForbiddenBody'
    500:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/InternalServerErrorBody'
 
 
 
  
  
 
    
 
     
  
   
        
      
      


     
     
       
   
         
     
       
      
        
   
   
     
         
       
    
      
    
       
    
     
    
    
       
         
     
    
    
     
   
      
      
      
