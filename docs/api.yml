openapi: 3.0.3
info:
  title: Library API
  version: 1.0.0
  description: STD22062
servers:
  - url: https://library.com
paths:
  /books:
    get:
      summary: Get all books
      description: The returned books are ordered by updated datetime.
      operationId: getBooks
      parameters:
        - in: query
          name: bookName
          description: Filter return books by given name
          required: false
          schema:
            type: string
        #TODO3: add parameter to filter books by intervals of dates of the releaseDate
         - in: query
          name: releaseDateStart
          description: Filter books by a minimum release date
          required: false
          schema:
            type: string
            format: date
        - in: query
          name: releaseDateEnd
          description: Filter books by a maximum release date
          required: false
          schema:
            type: string
            format: date
      responses:
        200:
          description: The list of filtered books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
    put:
      summary: Create or update a list of books
      operationId: crupdateBooks
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Book'
      responses:
        200:
          description: The list of created or updated books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
  /authors:
  #TODO2: complete GET (can be filtered by name) - PUT - DELETE
     put:
      summary: Create or update an author
      operationId: crupdateAuthor
      requestBody:
        content:
           application/json:
               schema:
                  $ref: '#/components/schemas/author'
      responses:
          200:
            description: The created or updated author
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/author'
    delete:
      summary: Delete an author
      operationId: deleteAuthor
      parameters:
        - in: query
          name: authorName
          description: Name of the author to delete
          required: true
          schema:
            type: string
      responses:
          204:
            description: Author successfully deleted
            
components:
  schemas:
    Book:
      type: object
      properties:
        id:
          type: string
        bookName:
          type: string
        author:
          #TODO1: set it as a component with properties : id, name, sex (M or F)
           $ref: '#/components/schemas/author'
          type: string
        pageNumbers:
          type: integer
        topic:
          type: string
          enum:
            - ROMANCE
            - COMEDY
            - OTHER
        releaseDate:
          type: string
          format: date
    author:
       type: object
       properties:
         id:
           type: string
         name:
           type: string
         sex:
           type: string
           enum:
             - M
             - F
